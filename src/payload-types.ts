/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    pages: Page;
    show: Show;
    reviews: Review;
    services: Service;
    lofts: Loft;
    'set-items': SetItem;
    contacts: Contact;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    show: ShowSelect<false> | ShowSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    lofts: LoftsSelect<false> | LoftsSelect<true>;
    'set-items': SetItemsSelect<false> | SetItemsSelect<true>;
    contacts: ContactsSelect<false> | ContactsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    redirects: Redirect;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs?: {
    tasks: unknown;
    workflows?: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  pageType:
    | 'home'
    | 'show'
    | 'reviews'
    | 'services'
    | 'prices'
    | 'loft'
    | 'sets'
    | 'contacts'
    | 'gallery'
    | 'text'
    | 'calendar';
  slug: string;
  title: string;
  contentHome?: {
    heroSection: {
      image?: (string | null) | Media;
      button1: {
        text: string;
        link: string;
      };
    };
    cards?:
      | {
          text: string;
          page: string | Page;
          image: string | Media;
          id?: string | null;
        }[]
      | null;
    lofts?:
      | {
          loft: string | Loft;
          link: string | Page;
          id?: string | null;
        }[]
      | null;
    button2: {
      text: string;
      link: string;
    };
  };
  contentShow?: {
    show?: (string | Show)[] | null;
  };
  contentReviews?: {
    reviews?: (string | Review)[] | null;
  };
  contentServices?: {
    services?: (string | Service)[] | null;
  };
  contentLoft?: {
    loft: string | Loft;
  };
  contentSets?: {
    sets?: (string | SetItem)[] | null;
  };
  contentContacts?: {
    main: (string | Contact)[];
    additional?:
      | {
          block: {
            name: string;
            contacts: (string | Contact)[];
          };
          id?: string | null;
        }[]
      | null;
    lofts?: (string | Loft)[] | null;
  };
  contentGallery?: {
    allowZoom?: boolean | null;
    itemsType: 'image' | 'video';
    items?: (string | Media)[] | null;
  };
  contentText?: {
    text: {
      [k: string]: unknown;
    }[];
  };
  contentCalendar?: {
    calendars?:
      | {
          title: string;
          code: string;
          id?: string | null;
        }[]
      | null;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lofts".
 */
export interface Loft {
  id: string;
  name: string;
  address: string;
  additional: string;
  mainPhoto: string | Media;
  map?: string | null;
  gallery?: (string | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "show".
 */
export interface Show {
  id: string;
  title: string;
  description: string;
  image?: (string | null) | Media;
  price?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  name: string;
  text: string;
  image?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  title: string;
  text: string;
  image?: (string | null) | Media;
  price?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "set-items".
 */
export interface SetItem {
  id: string;
  name: string;
  duration?: string | null;
  programs: {
    name: string;
    id?: string | null;
  }[];
  options?:
    | {
        name: string;
        id?: string | null;
      }[]
    | null;
  image: string | Media;
  price?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts".
 */
export interface Contact {
  id: string;
  name: string;
  type: 'phone' | 'email' | 'link';
  email?: string | null;
  phone?: string | null;
  link?: {
    url: string;
    text: string;
    format?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'show';
        value: string | Show;
      } | null)
    | ({
        relationTo: 'reviews';
        value: string | Review;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'lofts';
        value: string | Loft;
      } | null)
    | ({
        relationTo: 'set-items';
        value: string | SetItem;
      } | null)
    | ({
        relationTo: 'contacts';
        value: string | Contact;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  pageType?: T;
  slug?: T;
  title?: T;
  contentHome?:
    | T
    | {
        heroSection?:
          | T
          | {
              image?: T;
              button1?:
                | T
                | {
                    text?: T;
                    link?: T;
                  };
            };
        cards?:
          | T
          | {
              text?: T;
              page?: T;
              image?: T;
              id?: T;
            };
        lofts?:
          | T
          | {
              loft?: T;
              link?: T;
              id?: T;
            };
        button2?:
          | T
          | {
              text?: T;
              link?: T;
            };
      };
  contentShow?:
    | T
    | {
        show?: T;
      };
  contentReviews?:
    | T
    | {
        reviews?: T;
      };
  contentServices?:
    | T
    | {
        services?: T;
      };
  contentLoft?:
    | T
    | {
        loft?: T;
      };
  contentSets?:
    | T
    | {
        sets?: T;
      };
  contentContacts?:
    | T
    | {
        main?: T;
        additional?:
          | T
          | {
              block?:
                | T
                | {
                    name?: T;
                    contacts?: T;
                  };
              id?: T;
            };
        lofts?: T;
      };
  contentGallery?:
    | T
    | {
        allowZoom?: T;
        itemsType?: T;
        items?: T;
      };
  contentText?:
    | T
    | {
        text?: T;
      };
  contentCalendar?:
    | T
    | {
        calendars?:
          | T
          | {
              title?: T;
              code?: T;
              id?: T;
            };
      };
  meta?:
    | T
    | {
        overview?: T;
        title?: T;
        description?: T;
        image?: T;
        preview?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "show_select".
 */
export interface ShowSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  price?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  name?: T;
  text?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title?: T;
  text?: T;
  image?: T;
  price?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lofts_select".
 */
export interface LoftsSelect<T extends boolean = true> {
  name?: T;
  address?: T;
  additional?: T;
  mainPhoto?: T;
  map?: T;
  gallery?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "set-items_select".
 */
export interface SetItemsSelect<T extends boolean = true> {
  name?: T;
  duration?: T;
  programs?:
    | T
    | {
        name?: T;
        id?: T;
      };
  options?:
    | T
    | {
        name?: T;
        id?: T;
      };
  image?: T;
  price?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts_select".
 */
export interface ContactsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  email?: T;
  phone?: T;
  link?:
    | T
    | {
        url?: T;
        text?: T;
        format?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  logo: {
    image: string | Media;
    text: string;
  };
  links: {
    text: string;
    page: string | Page;
    id?: string | null;
  }[];
  social?:
    | {
        icon: string;
        link: {
          type: 'contact' | 'external';
          contact?: (string | null) | Contact;
          external?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  urls?:
    | {
        old: string;
        new: string;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  links?:
    | {
        text: string;
        page: string | Page;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?:
    | T
    | {
        image?: T;
        text?: T;
      };
  links?:
    | T
    | {
        text?: T;
        page?: T;
        id?: T;
      };
  social?:
    | T
    | {
        icon?: T;
        link?:
          | T
          | {
              type?: T;
              contact?: T;
              external?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  urls?:
    | T
    | {
        old?: T;
        new?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  links?:
    | T
    | {
        text?: T;
        page?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}